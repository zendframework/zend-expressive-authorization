{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Expressive Authorization middleware Zend-expressive-authorization provides middleware for Expressive and PSR-7 applications for authorizing specific routes based on ACL or RBAC systems. Installation You can install the zend-expressive-authorization library with Composer : $ composer require zendframework/zend-expressive-authorization Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#expressive-authorization-middleware","text":"Zend-expressive-authorization provides middleware for Expressive and PSR-7 applications for authorizing specific routes based on ACL or RBAC systems.","title":"Expressive Authorization middleware"},{"location":"#installation","text":"You can install the zend-expressive-authorization library with Composer : $ composer require zendframework/zend-expressive-authorization","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"v1/auth-adapter/","text":"Authorization adapters You can configure the authorization adapter to use via your service container configuration. Specifically, you can either map the service name Zend\\Expressive\\Authorization\\AuthorizationInterface to a factory, or alias it to the appropriate service. For instance, using Expressive container configuration , you could select the zend-expressive-authorization-acl adapter in either of the following ways: Using an alias: ```php use Zend\\Expressive\\Authorization\\AuthorizationInterface; use Zend\\Expressive\\Authorization\\Acl\\ZendAcl; return [ 'dependencies' => [ // Using an alias: 'aliases' => [ AuthorizationInterface::class => ZendAcl::class, ], ], ]; ``` Mapping to a factory: ```php use Zend\\Expressive\\Authorization\\AuthorizationInterface; use Zend\\Expressive\\Authorization\\Acl\\ZendAclFactory; return [ 'dependencies' => [ // Using a factory: 'factories' => [ AuthorizationInterface::class => ZendAclFactory::class, ], ], ]; ``` We provide two different adapters. The RBAC adapter is provided by zend-expressive-authorization-rbac . The ACL adapter is provided by zend-expressive-authorization-acl . Each adapter is installable via Composer : $ composer require zendframework/zend-expressive-authorization-rbac # or $ composer require zendframework/zend-expressive-authorization-acl In each adapter, we use the route name as the resource. This means you can specify if a role is authorized to access a specific HTTP route . However, this is just one approach to implementing an authorization system; you can create your own system by implementing the AuthorizationInterface . For more information on the adapters, please read the RBAC documentation and the ACL documentation .","title":"Authorization adapters"},{"location":"v1/auth-adapter/#authorization-adapters","text":"You can configure the authorization adapter to use via your service container configuration. Specifically, you can either map the service name Zend\\Expressive\\Authorization\\AuthorizationInterface to a factory, or alias it to the appropriate service. For instance, using Expressive container configuration , you could select the zend-expressive-authorization-acl adapter in either of the following ways: Using an alias: ```php use Zend\\Expressive\\Authorization\\AuthorizationInterface; use Zend\\Expressive\\Authorization\\Acl\\ZendAcl; return [ 'dependencies' => [ // Using an alias: 'aliases' => [ AuthorizationInterface::class => ZendAcl::class, ], ], ]; ``` Mapping to a factory: ```php use Zend\\Expressive\\Authorization\\AuthorizationInterface; use Zend\\Expressive\\Authorization\\Acl\\ZendAclFactory; return [ 'dependencies' => [ // Using a factory: 'factories' => [ AuthorizationInterface::class => ZendAclFactory::class, ], ], ]; ``` We provide two different adapters. The RBAC adapter is provided by zend-expressive-authorization-rbac . The ACL adapter is provided by zend-expressive-authorization-acl . Each adapter is installable via Composer : $ composer require zendframework/zend-expressive-authorization-rbac # or $ composer require zendframework/zend-expressive-authorization-acl In each adapter, we use the route name as the resource. This means you can specify if a role is authorized to access a specific HTTP route . However, this is just one approach to implementing an authorization system; you can create your own system by implementing the AuthorizationInterface . For more information on the adapters, please read the RBAC documentation and the ACL documentation .","title":"Authorization adapters"},{"location":"v1/intro/","text":"Introduction This component provides authorization middleware for PSR-7 and PSR-15 applications. An authorization system first needs authentication: to verify that an identity has access to something (i.e., is authorized) we first need the identity , which is provided during authentication. Authentication is provided via the package zend-expressive-authentication . That library provides an AuthenticationMiddleware class that verify credentials using the HTTP request, and stores the identity via a PSR-7 request attribute . The identity generated by zend-expressive-authentication is stored as the request attribute Zend\\Expressive\\Authentication\\UserInterface as a UserInterface implementation. That interface looks like the following: namespace Zend\\Expressive\\Authentication; interface UserInterface { /** * Get the unique user identity (id, username, email address or ...) */ public function getIdentity() : string; /** * Get all user roles * * @return Iterable */ public function getRoles() : iterable; /** * Get a detail $name if present, $default otherwise */ public function getDetail(string $name, $default = null); /** * Get all the details, if any */ public function getDetails() : array; } zend-expressive-authorization consumes this identity attribute. It checks if a user's role (as retrieved from the UserInterface object) is authorized (granted) to the perform the current HTTP request. Authorization is performed using the isGranted() method of the AuthorizationInterface . We offer two adapters: zend-expressive-authorization-rbac , which implements Role-Based Access Controls ( RBAC ) zend-expressive-authorization-acl , which implements an Access Control List ( ACL ). If you want to know more about authentication using middleware in PHP, we suggest reading the blog post \"Authorize users using Middleware\" .","title":"Introduction"},{"location":"v1/intro/#introduction","text":"This component provides authorization middleware for PSR-7 and PSR-15 applications. An authorization system first needs authentication: to verify that an identity has access to something (i.e., is authorized) we first need the identity , which is provided during authentication. Authentication is provided via the package zend-expressive-authentication . That library provides an AuthenticationMiddleware class that verify credentials using the HTTP request, and stores the identity via a PSR-7 request attribute . The identity generated by zend-expressive-authentication is stored as the request attribute Zend\\Expressive\\Authentication\\UserInterface as a UserInterface implementation. That interface looks like the following: namespace Zend\\Expressive\\Authentication; interface UserInterface { /** * Get the unique user identity (id, username, email address or ...) */ public function getIdentity() : string; /** * Get all user roles * * @return Iterable */ public function getRoles() : iterable; /** * Get a detail $name if present, $default otherwise */ public function getDetail(string $name, $default = null); /** * Get all the details, if any */ public function getDetails() : array; } zend-expressive-authorization consumes this identity attribute. It checks if a user's role (as retrieved from the UserInterface object) is authorized (granted) to the perform the current HTTP request. Authorization is performed using the isGranted() method of the AuthorizationInterface . We offer two adapters: zend-expressive-authorization-rbac , which implements Role-Based Access Controls ( RBAC ) zend-expressive-authorization-acl , which implements an Access Control List ( ACL ). If you want to know more about authentication using middleware in PHP, we suggest reading the blog post \"Authorize users using Middleware\" .","title":"Introduction"}]}